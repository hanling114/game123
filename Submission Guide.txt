NOTE:  We are not currently accepting new characters from the game unless they have a significant amount of content.  Please contact Aftermath Team if you want to create a new character.  

Submissions for existing characters will be accepted normally.

:: Sample Scene 1
Lets walk through how a scene works from the creator's perspective shall we?  

The first thing we're going to talk about is the title of a scene.  Or a "Passage" as game makers call it  If you look above, you'll see a line that reads ":: Sample Scene 1"  That is actually the name of this page.  The player never sees that, but that's what the game looks for when the scene is triggered.  If I want to make a second tutorial scene, I'd named it "Sample Scene 2"

For all of you, Scenes will be named "Submitted NAME Scene 1" and count up from there.  By labeling it "Submitted" then I know it's a scene someone else wrote and makes it easier to find should the need arise.

Now, after the title, everything that follows is the text that the player sees.

There's some other stuff, but I'll cover those later.  The last item I'll cover is the links to the following pages.

[[About Links|Sample Scene 1a]]
[[About Credits|Sample Scene 1b]]
[[About Relationship Checks|Sample Scene 1c]]
[[About Stat Changes|Sample Scene 1d]]
[[About Dialogue|Sample Scene 1h]]

Submitted by GateKeeper




:: Sample Scene 1a
Lets talk about Links.  Do you see the end of the first passage, where you have four sets of words between double brackets?  [[Words]]  That's a link.  The first portion is what the player will see, "About links"  The | actually works as a break, showing the player what comes before it, but allowing the game to look for what follows when searching for the next passage.  

If you look, you'll realize that "About Links" is followed by "Sample Scene 1a"  You'll also notice that the name of this passage is "Sample Scene 1a" The link is case sensitive.

You will also notice that the numbering system is in sequence, a, b, c, d, . . . . When you create a link, try to keep them in order, if I ever need to find something, it's much easier to locate a piece of content if I can simply work my way down the list until I find the one I'm looking for.  This scene includes two links.

Finally, lets take a look at the "End" of a scene.  The following link is just a little different than the one above.  You'll see that instead of a proper passage name, it ends with "$location" instead.  the $location command refreshes the location that the protagonist is in so that the room's description will refresh.

[[About additional links.|Sample Scene 1e]]
[[End.|$location]]


Submitted by GateKeeper



:: Sample Scene 1b
This is probably the easiest bit.  Giving yourself credit.  At the end of each passage, if you want credit for all of the hard work you put into the scene you submit, Add "Submitted by YourNameHere" at the end of the passage.  I try to double space between the links and the credits just because it helps show that it's not a part of the game text.  

If you look at this whole document, you'll see that the credit gets added to every single passage.  Sometimes different people write additional branches for existing scenes and this way every one of those passages gets credited to the person who created that content.


Submitted by GateKeeper


NOTE:  Realize that I didn't add a link at the end of this passage?  If this passage was actually being played inside of the game, it would be a dead end.  It would be one of those scenes that doesn't have a proper exit.



:: Sample Scene 1c
Stat Checks are used to display different content to the player based on relationship levels.  A lot of the time these aren't needed, a lot of the time these are handled simply, and other times they can be incredibly complex.  In this passage, I'm going to show you a fairly simple relationship check and explain how to make one that is either more or less complex.

In this example, I'm going to use "Anna" as the character, both for the stat checks at the start, and for the stat adjustments later.  If you want to learn more about Stat Adjustments

<<if $anna.affection gte 700 and $anna.fear lte 250>>Lets begin with the little snip of code right before what I'm writing right now.  I'm going to try breaking this down bit by bit.

if = This part is telling the game "If" you meet the following conditions, this portion of text will display.

gte = This means "Greater Than or Equal to" the following number.  The number can be adjusted to anything you like, but the game is only set up to search for numbers between 0 and 1000.

lte = This means "Less Than or Equal to" the following number.  This works the same as the gte only it looks for a number below the indicated number instead of above.

Numbers:  Any of these numbers can be adjusted up or down as needed.

NOTE:  It is important to pay attention to how you order the skill checks.  The game will only look for conditions until it finds one that it meets, so if in this case, I wanted to do another skill check that required affection over 800 and fear below 200, the game would never find that scene because it had already searched those ranges to find this segment of text.  If I had checks at a higher level, that would have to come first.

<<elseif $anna.affection gte 500 and ($anna.fear lte 500 and $anna.fear gte 400)>>You'll notice that this section of code starts just a little differently.  This one starts with "elseif" instead of "if."  It also searches for a middling stat range instead of just above or below a certain number.

Where as the relationship check started with "if" you meed these conditions.  This one basically says "if" you didn't meet the first condition, it's still looking, "elseif" these conditions are met, we'll display this instead! 

Now, look at the "fear" stat checks, you'll notice that they're in parenthesizes, this helps tell the game that these stat checks should always be considered together.  In this case, fear above 400, but below 500 is the range being indicated.

<<elseif $anna.affection gte 500 or ($anna.fear lte 500 and $anna.fear gte 400)>>If you've been looking closely, you'll notice that this line of code is just a LITTLE different than the one before it.  Instead of "and" there is a "or" instead.  The first couple of examples require that you meet both conditions, this one, EITHER condition will trigger this piece of text to appear.

<<elseif $anna.fear gte 750>>This one only includes a single relationship stat that the same is looking for.  Assuming you don't meet any of the conditions before it, then this one will play if you have the correct stats for it.  Checking more than one stat makes a scene more dynamic, but simple checks like this one, especially toward the end of a long sequence of checks, can help cover broad ranges of relationship without being complex if 

<<else>>Unlike all of the checks above, this one is a simple "else" what this does is displays the contents here if no other conditions were met.

Below, you'll see a bit of code that includes "/if"  What that bit of code does is tells the game to stop looking for new conditions.  Think of it as a final page in a book.  If you forget to add it, it will break the whole thing.  On the up side, at least it's an easy fix when that happens.

<</if>>

So, lets talk a little more about the above.  There's a couple of things that I didn't cover, and I'll do so here.

Less complex:  I try to at MINIMUM include three stat ranges.  if/elseif/else.  By doing this, I can have a high/mid/low relationship range for a scene.  

More complex:  The only limit on the number of checks you can work into a scene is the number of ways you can arrange the numbers.  You can literally do a different scene variant for every number between  0 and 1000, in every combination for all three relationship stats.  I typically do things in increments of no less than 100.

trust = This this is one of the three core relationship stats, it is NOT one I used in the example above.  The biggest reason for this is that it doesn't get used all that much in these kinds of scenes.  Trust indicates their comfort level with you when talking with you, or sharing information most of the time.  That said, if it's something you want to work into your checks, go for it.

[[Want to learn about skill checks?|Sample Scene 1f]]


Submitted by GateKeeper<<addtime { minute : 5 }>>
<<set $anna.affection += 1>>
<<set $anna.fear -= 1>>
<<set $anna.trust += 1>>
NOTE:  The "set" code can all be on a single line but are displayed as their own line to make it easier to read for those of you reading.


Sample code:  This is the same as what I use above in the example, but without the text.

<<if $anna.affection gte 700 and $anna.fear lte 250>>

<<elseif $anna.affection gte 500 and $anna.fear lte 500>>

<<elseif $anna.affection gte 500 or $anna.fear lte 500>>

<<elseif $anna.affection gte 500>>

<<else>>

<</if>>





:: Sample Scene 1d
Lets talk about stat changes for a little bit.  They're really not that complex from your perspective, but at the same time they're probably the most important thing in the game.

Time.  This one is incredibly easy.  You see that snip of code below, the first line of it, the one that starts with "addtime"?  The number in that is just a sample.  You can change that to literally anything.  By placing that bit of code at the end of a passage, it causes that much time to pass.  Don't worry about hours or days, the game handles that on it's own, just the minutes are going to matter in the context of a scene.  

Something I do for time when I don't know what to put for how much time passes, I'll time myself reading dialog in a scene and round up to the nearest minute.  Scenes with little or no dialog can be a little trickier, but you can usually picture what happens, estimate how long it would take to do something, then round up to the nearest minute too.

Relationship stats.  I actually included an example of both + and - for each of the three relationship stats each character has.  Just like the time stat, you can adjust these numbers.  One important thing to note is how much these numbers can move.  In a normal scene, I try to avoid changing stats more than 3 at any given time, and usually no more than 5 over the course of a scene.  Larger stat jumps should never be taken lightly as those tend to be significant, memorable moments.  The only exception to this restraint is the Intro scene for any given character where large jumps in stats are the norm as they indicate an NPCs first impressions of the MC and are intended to help reflect the player's preferred play style.

<<addtime { minute : 5 }>>
<<set $name.affection += 1>>
<<set $name.affection -= 1>>
<<set $name.fear += 1>>
<<set $name.fear -= 1>>
<<set $name.trust += 1>>
<<set$name.trust -= 1>>

NOTE:  I have used "$name" in the samples above.  To use these with various NPCs, you will need to change that piece of the code with the one for each character.  At the time of this writing, the NPC code for each character is as follows:
Anna = $anna
Bubbles = $bubbles
Claire = $claire
Eve = $eve
Gaia = $gaia
Maki = $maki
Misaki = $misaki
Mitsuko = $mitsuko
Mully = $mully
Rey = $rey
Shanaya = $shanaya
Willy = $willy
Yami = $yami

For an example of these kinds of stat changes, I included a fully functional set for Anna in "Sample Scene 1c" above.

[[Complex changes.|Sample Scene 1g]]


Submitted by GateKeeper




:: Sample Scene 1e
So, you've seen a bit about how links work.  This one is more a footnote on what's already been covered rather than some major extension to it.  

The very first passage of this scene had links 1a, 1b, 1c, and 1d.  This one counts up from there.  You'll notice that 1e follows 1d.  This serves to make the scene easier to find should I ever need to fix or expand the scene in the future.

And finally, I'm going to pull a little stunt just to show how you don't need to be one dimensional with how you like things.  This final link would take you back to the start of this document, to the very first passage.  The reason I feel it is important to give this example is because you can link more than one passage to another passage.  If I really wanted to, every passage in this sample scene could be sent to the same place.

[[Return to start.|Sample Scene 1]]


Submitted by GateKeeper

NOTE:  There are other, special, links within the game as well, but I tend to handle those on my end since they're a bit more complex and easy to mess up.  If you have need to direct a scene to the punishments or one of the sex mechanics, or anything else in the game, let me know and I'll either get you the code you need, or walk you through how it's done.




:: Sample Scene 1f
Skill checks are handled much the same way as relationship checks.  They should reflect their talent for a particular task.  

Since we used Anna above, I'll do the same here.

On the grounds that this is pretty simple, I'll make a few notes, then show the code much like we did before with the relationship stuff.

Most skill checks are handled in increments of 10 or 25, though you can use anything you like to make your scenes more complex if you want.  100 is VERY good at their job.  0 is REALLY bad at the job, with a sliding scale in between.  With that in mind, the code works the same way mechanically as the relationship stuff.

<<if $anna.cooking gte 100>>

<<elseif $anna.cooking gte 75>>

<<elseif $anna.cooking gte 50>>

<<elseif $anna.cooking gte 25>>

<<else>>

<</if>>


List of common NPC Skills (range: 0–100):
$name.anal   
$name.billiards 
$name.cooking  
$name.housework 
$name.husbandry 
$name.oral    
$name.parenting 
$name.stripping 
$name.vaginal   
$name.whoring   
$name.yardwork 


Submitted by GateKeeper



:: Sample Scene 1g
This is less a tutorial section, and more a few snips of code that you might find useful.

If an NPC receives a creampie, include the following code (Change name as needed.)
<<run $name.pregnancyAttempt($player)>>
What this code will do is check for Fertility (No birth control?), Pregnancy (Not already pregnant?), Fertility (Right time of month?  Does she have difficulty conceiving?), and Virility (Male participant can have kids?  Sperm count is good?)

If drinking include the following code (Change name as needed.)
<<if not $name.drinkingRoll(16)>><<run $misaki.intoxicatedAttempt(1)>><</if>>
What this code will do is check the character's tolerance to alcohol against a random number.  Pass, they don't become more drunk.  Fail and they become more intoxicated.  Some alcohols raise the intoxication levels more than others.  For things like wine or beer, add the check once.  For harder alcohols, include the check twice.  Adding the check more than once will mean that each check will have the potential to add a point of intoxication.


Submitted by GateKeeper




:: Sample Scene 1h
Those pretty dialogue boxes with the little pictures of various NPCs don't make themselves.  They require that we do a little work on our end so that they display properly.

I'll use the player character as an example both because that will likely get used the most, and because that's the only character currently in the game that the player names.

You see the quotation marks with "player" in them?  That's going to be important.  that tells the code who is talking so that the game knows what art to display, and how to set up the dialogue box.  The player character is being used in this example, but placing the name (In all lower case.  So 'Anna' would be 'anna' for example.) of any NPC in the game will cause the dialogue box to display properly for any NPC in the game.

<<talk "player">>This is what I'm saying.<</talk>>\

The above code snip can be copy/pasted into the game.  Simply replace the character name and the dialogue you want them to say as needed.

And if you want to make it a thought bubble all you need to do is replace "player" with "thought" like this:

<<talk "thought">>This is what the main character is thinking.<</talk>>\



##Formatting:##
/ - Removes leading white spaces. 
//Text// - Italics
''Text'' - Bold
!!Text - Smaller Title Heading
!Text - Biggest Title Heading
/* Text */ (Comment Code)

Letter Text Formatting:
<div class='letterText'>\
Text.
</div>\

An example of this is the letter the player reads from his uncle in the intro. Using the above code with any text should have the same effect.

Tooltip:
<span class='tooltip'>Default Text Display.<span class='tooltiptext'>Text On Hover.</span></span>

Displays separate text on hover.

Golden Changelog Box:
<div class="changelog version">
    Text.
</div>

Charm Text:
@@#charmText;Text.@@

The most notable use of charm text is the names of the npcs as used in talk bubbles. It is also used in the kennels area for the male/female dog distinction headings.

Charm Title:
@@#charmTitle;Text.@@

Simply a bigger, centered version of charm text.

Slim Link:
@@.slimlink;[[ButtonName|PassageName]]@@

A button that auto resizes itself to fit the length of the contained text.

One of the easiest examples to find for this is the link to the notebook in the lab.

Changing Text Color:
@@color:COLORHEX;Text.@@

Changing Text Size:
<span style="font-size: SIZE%">Text.</span>

All Color Formatting:
@@.a1;Text.@@ - Dark Red
@@.a2;Text.@@ - Light Blue
@@.a3;Text.@@ - Medium Purple
@@.a4;A4 TEXT - Deep Blue@@
@@.a5;A5 TEXT - Pale Blue@@
@@.a6;A6 TEXT - Middle Golden@@
@@.a7;A7 TEXT - Greenish@@





:: Sample Scene 1 NOTES
Most of the time when I create a scene, I'll include a passage at the end for my notes.  I use the unique name of the scene, followed by the word NOTES for this passage.  You'll notice that nowhere in this document is it linked.  In the game, no one will ever be able to accidentally navigate to this page.

This place makes a great location to mention WHERE the scene might take place, whether or not another scene must play out first, if this is a one time scene or repeatable, or anything else you think is important enough to make a note of.



:: Code, and all that fun stuff
Everything that follows is optional.  If you want to make use of this, great!  If not, that's ok too.


Location names:
Mansion Locations:
attic
ball room
bathing room
diningRoom
dungeon
entryHall
gym
kitchens
laboratory
laundry
library
living room
lounge
master bath
master bedroom
northHall
northHallUpper
N bathroom
pantry
sauna
SE bedroom N
SW bedroom N
servant area
servant bathroom
NE servant room
NW servant room
SE servant room
SW servant room
southHall
southHallUpper
S bathroom
NE bedroom S
NW bedroom S
SE bedroom S
SW bedroom S
storage
study

NOTE:  "NW servant room" is Anna and Eve's default bedroom.


Mansion Grounds Locations:
backyard
boatHouse
driveway
eastGrounds
frontYard
garage
greenhouse
kennels
mansion gate
mansionForest
pond
pool
shed
stables
westGrounds


Town Locations:
bookworm
BustANut
daddysDiner
DoggyStyleStore
drinkingDonkey
Fertilizer Store
halloween store
Herbs of Cthulhu
honeyPot
isawuCumming
Little Sprouts Seeds
muffinTop
needlePoint
neighborsCloset
parkinglot
Peace Love and (re)Produce
Pendleton Arms
pendletonPark
pendletonTheater5
Quickiemart
Sharky
spitz
theDojo
theJoker
theLoveShack
trickyDicks
udderDelights
wetWilly
youkaiEmporium

Town Street Locations:
eastStreetPendleton
main street
midMainPendleton
northMainPendleton
southMainPendleton
westStreetPendleton





To insert characters in scenes:
<<if $misaki.hasFlag("owned")>> Misaki Content <</if>>

<<if $sidra.hasFlag("owned")>> Sidra Content <</if>>

<<if $mitsuko.hasFlag("owned")>> Mitsuko Content <</if>>

<<if $jen.hasFlag("owned")>> Jen Content <</if>>

<<if $rey.hasFlag("owned")>> Rey Content <</if>>

<<if $claire.hasFlag("contact")>> Claire Content <</if>>

<<if $yami.hasFlag("contact")>> Yami Content <</if>>

<<if $makiVisit>> Maki and Bubbles content. <</if>>

<<if $rebekkah.hasFlag("owned")>> Rebekkah Content <</if>>

<<if $bridgette.hasFlag("owned")>> Bridgette Content <</if>>

<<if $gaia.hasFlag("met") and $gaia.isHere>> Gaia Content <</if>>

<<if $mully.hasFlag("owned")>> Mully Content <</if>>

<<if $titch.hasFlag("owned")>> Titch Content <</if>>

<<if $olivia.hasFlag("yourHome")>> Olivia Content <</if>>

<<if $elodie.hasFlag("met")>> Gaia Content <</if>>




Character API

All API fields are validated on assignment, return sensible defaults if unset, and attempt to be as storage efficient as possible.
Self and parental identity
Core

    <Character>.id → (string) Gets the character's ID (e.g., eve).
    <Character>.fatherId → (string) Gets the character's father's ID (e.g., player).
    <Character>.motherId → (string) Gets the character's mother's ID (e.g., anna).

Name
Core

    <Character>.firstName ↔ (string) Gets or sets the character's first name (e.g., Claire).
    <Character>.middleName ↔ (string) Gets or sets the character's middle name (e.g., Aileen).
    <Character>.lastName ↔ (string) Gets or sets the character's last name (e.g., O'Reilly).
    <Character>.nickName ↔ (string) Gets or sets the character's nickname (e.g., Red).
    <Character>.namePrefix ↔ (string) Gets or sets the character's name prefix (e.g., Miss).
    <Character>.nameSuffix ↔ (string) Gets or sets the character's name suffix (e.g., III).

Descriptives

    <Character>.allName → (string) Gets the character's aggregate (full) name with prefix and suffix (e.g., Miss Claire Aileen O'Reilly III).
    <Character>.firstNamePossessive ↔ (string) Gets the possessive case for the character's first name (e.g., Claire's, Bubbles').
    <Character>.fullName → (string) Gets the character's aggregate (full) name without prefix or suffix (e.g., Claire Aileen O'Reilly).
    <Character>.nickNamePossessive ↔ (string) Gets the possessive case for the character's nickname (e.g., Red's).
    <Character>.nickOrName → (string) Gets the character's casual/familiar name (nickname or, failing that, first name).
    <Character>.nickOrNamePossessive → (string) Gets the possessive case for the character's casual/familiar name (nickname or, failing that, first name).

Pronoun
Core

    <Character>.pronounGender ↔ (Character.PronounGender) Gets or sets the character's pronoun gender.

Descriptives

    <Character>.he → (string) Gets the character's third-person subjective pronoun.
    <Character>.she → (string) Gets the character's third-person subjective pronoun.
    <Character>.him → (string) Gets the character's third-person objective pronoun.
    <Character>.her → (string) Gets the character's third-person objective pronoun.
    <Character>.hers → (string) Gets the character's third-person possessive pronoun.
    <Character>.his → (string) Gets the character's third-person possessive pronoun.
    <Character>.her_ → (string) Gets the character's third-person determiner pronoun.
    <Character>.his_ → (string) Gets the character's third-person determiner pronoun.
    <Character>.herself → (string) Gets the character's third-person reflexive pronoun.
    <Character>.himself → (string) Gets the character's third-person reflexive pronoun.
    <Character>.woman → (string) Gets the character's personal gender identifier.
    <Character>.man → (string) Gets the character's personal gender identifier.
    <Character>.He → (string) Gets the character's third-person subjective pronoun.
    <Character>.She → (string) Gets the character's third-person subjective pronoun.
    <Character>.Him → (string) Gets the character's third-person objective pronoun.
    <Character>.her → (string) Gets the character's third-person objective pronoun.
    <Character>.Hers → (string) Gets the character's third-person possessive pronoun.
    <Character>.His → (string) Gets the character's third-person possessive pronoun.
    <Character>.Her_ → (string) Gets the character's third-person determiner pronoun.
    <Character>.His_ → (string) Gets the character's third-person determiner pronoun.
    <Character>.Herself → (string) Gets the character's third-person reflexive pronoun.
    <Character>.Himself → (string) Gets the character's third-person reflexive pronoun.
    <Character>.Woman → (string) Gets the character's personal gender identifier.
    <Character>.Man → (string) Gets the character's personal gender identifier.

Physical details
Core

    <Character>.ageLooks ↔ (float) Gets or sets the character's apparent age (in years).
    <Character>.ageReal ↔ (float) Gets or sets the character's real age (in years).
    <Character>.build ↔ (Character.Build) Gets or sets the character's body type.
    <Character>.chest ↔ (string) Gets or sets the character's chest description (mostly breast cup size).
    <Character>.eyeColor ↔ (Character.EyeColor) Gets or sets the character's real eye color.
    <Character>.eyeDye ↔ (string) Gets or sets the character's eye dye color (i.e. colored contacts).
    <Character>.facialHairDye ↔ (string) Gets or sets the character's facial hair dye color.
    <Character>.facialHairStyle ↔ (string) Gets or sets the character's facial hair style description.
    <Character>.freckles ↔ (boolean) Gets or sets whether the character has freckles.
    <Character>.gender ↔ (Character.Gender) Gets or sets the character's gender.
    <Character>.hairColor ↔ (Character.HairColor) Gets or sets the character's real (full body) hair color.
    <Character>.headHairDye ↔ (string) Gets or sets the character's head hair dye color.
    <Character>.headHairStyle ↔ (string) Gets or sets the character's head hair style description.
    <Character>.height ↔ (float) Gets or sets the character's (in US Customary inches).
    <Character>.nails ↔ (string) Gets or sets the character's nail description.
    <Character>.penis ↔ (string) Gets or sets the character's penis description.
    <Character>.pubicHairDye ↔ (string) Gets or sets the character's pubic hair dye color.
    <Character>.pubicHairStyle ↔ (string) Gets or sets the character's pubic hair style description.
    <Character>.skinTone ↔ (Character.SkinTone) Gets or sets the character's skin tone.
    <Character>.vagina ↔ (string) Gets or sets the character's vagina description.
    <Character>.weight ↔ (float) Gets or sets the character's weight (in US Customary pounds).

Descriptives

    <Character>.ageDesc → (string) Gets the character's age description (apparent age or, failing that, real age).
    <Character>.eyeColorDesc → (string) Gets the character's eye color description (dyed color or, failing that, real color).
    <Character>.facialHairColorDesc → (string) Gets the character's facial hair color description (dyed color or, failing that, real color).
    <Character>.facialHairDesc → (string) Gets the character's aggregate facial hair description (style and color description).
    <Character>.headHairColorDesc → (string) Gets the character's head hair color description (dyed color or, failing that, real color).
    <Character>.headHairDesc → (string) Gets the character's aggregate head hair description (style and color description).
    <Character>.heightDesc → (string) Gets the character's height in human-friendly units (e.g., 7 ft 2 in.).
    <Character>.pubicHairColorDesc → (string) Gets the character's pubic hair color description (dyed color or, failing that, real color).
    <Character>.pubicHairDesc → (string) Gets the character's aggregate pubic hair description (style and color description).
    <Character>.weightDesc → (string) Gets the character's weight in human-friendly units (e.g., 125 lb).

Queries

    <Character>.hasPenis → (boolean) Gets whether the character has a penis (males and hermaphrodites).
    <Character>.hasVagina → (boolean) Gets whether the character has a vagina (females and hermaphrodites).
    <Character>.isFemale → (boolean) Gets whether the character is a female.
    <Character>.isHerm → (boolean) Gets whether the character is a hermaphrodite.
    <Character>.isMale → (boolean) Gets whether the character is a male.
    <Character>.isVirgin → (boolean) Gets whether the character is a virgin (shortcut for: <Character>.hasFlag("virgin")).

Attributes (range: 0–100; default: 100)

Attribute values are automatically clamped to the range 0–100 on assignment and default to 100.

    <Character>.health ↔ (integer) Gets or sets the character's health.
    <Character>.stamina ↔ (integer) Gets or sets the character's stamina.

Statistics (range: 0–Infinity, effective: 0–1000; default: 0)

Statistic values are automatically clamped to the range 0–Infinity on assignment and default to 0.

    <Character>.affection ↔ (integer) Gets or sets the character's affection.
    <Character>.fear ↔ (integer) Gets or sets the character's fear.
    <Character>.trust ↔ (integer) Gets or sets the character's trust.

Skills (range: 0–100; default: 0)

Skill values are automatically clamped to the range 0–100 on assignment and default to 0.
Core

    <Character>.alchemy ↔ (integer) Gets or sets the character's alchemy skill (i.e. laboratory shenanigans).
    <Character>.anal ↔ (integer) Gets or sets the character's anal sex skill.
    <Character>.billiards ↔ (integer) Gets or sets the character's billiards skill.
    <Character>.cooking ↔ (integer) Gets or sets the character's cooking skill.
    <Character>.drinking ↔ (integer) Gets or sets the character's drinking skill.
    <Character>.housework ↔ (integer) Gets or sets the character's housework skill.
    <Character>.husbandry ↔ (integer) Gets or sets the character's animal husbandry skill.
    <Character>.managerial ↔ (integer) Gets or sets the character's managerial skill.
    <Character>.oral ↔ (integer) Gets or sets the character's oral sex skill.
    <Character>.parenting ↔ (integer) Gets or sets the character's parenting skill.
    <Character>.stripping ↔ (integer) Gets or sets the character's stripping skill.
    <Character>.training ↔ (integer) Gets or sets the character's slave training skill.
    <Character>.vaginal ↔ (integer) Gets or sets the character's vaginal sex skill.
    <Character>.whoring ↔ (integer) Gets or sets the character's whoring skill.
    <Character>.yardwork ↔ (integer) Gets or sets the character's yardwork skill.

Methods

The modifier parameter adjusts the difficulty up/down based on the specified integer value.

    <Character>.alchemyRoll(modifier) → (boolean) Returns whether the character passed the alchemy skill check.
    <Character>.analRoll(modifier) → (boolean) Returns whether the character passed the anal sex skill check.
    <Character>.billiardsRoll(modifier) → (boolean) Returns whether the character passed the billiards skill check.
    <Character>.cookingRoll(modifier) → (boolean) Returns whether the character passed the cooking skill check.
    <Character>.drinkingRoll(modifier) → (boolean) Returns whether the character passed the drinking skill check.
    <Character>.houseworkRoll(modifier) → (boolean) Returns whether the character passed the housework skill check.
    <Character>.husbandryRoll(modifier) → (boolean) Returns whether the character passed the animal husbandry skill check.
    <Character>.managerialRoll(modifier) → (boolean) Returns whether the character passed the managerial skill check.
    <Character>.oralRoll(modifier) → (boolean) Returns whether the character passed the oral sex skill check.
    <Character>.parentingRoll(modifier) → (boolean) Returns whether the character passed the parenting skill check.
    <Character>.strippingRoll(modifier) → (boolean) Returns whether the character passed the stripping skill check.
    <Character>.trainingRoll(modifier) → (boolean) Returns whether the character passed the slave training skill check.
    <Character>.vaginalRoll(modifier) → (boolean) Returns whether the character passed the vaginal sex skill check.
    <Character>.whoringRoll(modifier) → (boolean) Returns whether the character passed the whoring skill check.
    <Character>.yardworkRoll(modifier) → (boolean) Returns whether the character passed the yardwork skill check.

Location
Core

    <Character>.location ↔ (string) Gets or sets the character's location.

Queries

    <Character>.isHere → (boolean) Gets whether the character is at the current location.

Miscellaneous
Core

    <Character>.bed ↔ (integer) Gets or sets the character's bed value.
    <Character>.callsPlayer ↔ (string) Gets or sets what the character calls the player.
    <Character>.meal ↔ (integer) Gets or sets the character's meal value.
    <Character>.primaryJob ↔ (string) Gets or sets the character's primary job.
    <Character>.secondaryJob ↔ (string) Gets or sets the character's secondary job.

Queries

    <Character>.hasMet → (boolean) Gets whether the character has met the player (shortcut for: <Character>.hasFlag("met")).
    <Character>.isOwned → (boolean) Gets whether the character is "owned" by the player (shortcut for: <Character>.hasFlag("owned")).

Flags

Flags are unique and essentially boolean (i.e. characters either have a flag or they do not).
Methods

    <Character>.addFlag(flag) — Adds the specified flag.
    <Character>.deleteFlag(flag) — Deletes the specified flag.
    <Character>.hasFlag(flag) → (boolean) Returns whether the specified flag exists.
    <Character>.toggleFlag(flag) — Toggles the specified flag.

Cum Filled
Queries

    <Character>.isCumFilledAnally → (boolean) Gets whether the character is anally cum filled.
    <Character>.isCumFilledOrally → (boolean) Gets whether the character is orally cum filled.
    <Character>.isCumFilledVaginally → (boolean) Gets whether the character is vaginally cum filled.

Methods

    <Character>.cumFilledAttempt(orifice) → (boolean) Makes the character cum filled in the specified orifice (valid: "anal", "oral", "vaginal").
    <Character>.cumFilledFinalize(orifice) — Removes the cum filled effect from the specified orifice.

Intoxicated
Core

    <Character>.intoxicatedRate ↔ (float) Gets or sets the intoxication's sobering rate multiplier (range: 0–10; default: 1).

Descriptives

    <Character>.intoxicatedLevel → (integer) Gets the level of the character's intoxication (basically, hours remaining rounded up).

Queries

    <Character>.isIntoxicated → (boolean) Gets whether the character is intoxicated.

Methods

    <Character>.intoxicatedAttempt(level) → (boolean) Makes the character intoxicated or increases existing intoxication.

Pregnancy
Core

    <Character>.contraception ↔ (boolean) Gets or sets whether the character is on birth control—which is 100% effective.
    <Character>.fertility ↔ (integer) Gets or sets the character's base percent chance to conceive as a female (range: 0–100; default: 0).
    <Character>.virility ↔ (integer) Gets or sets the character's base percent chance to conceive as a male (range: 0–100; default: 0).
    <Character>.pregnancyRate ↔ (float) Gets or sets the pregnancy's gestation rate multiplier (range: 0–10; default: 1).

Descriptives

    <Character>.pregnancyDay → (integer) Gets the number of whole days of gestation that have been completed, or -1 if the character is not pregnant.
    <Character>.pregnancyWeek → (integer) Gets the number of whole weeks of gestation that have been completed, or -1 if the character is not pregnant.

Queries

    <Character>.isMenstruating → (boolean) Gets whether the character is menstruating—i.e. discharging blood, "on the rag", etc.
    <Character>.isPregnant → (boolean) Gets whether the character is pregnant.

Methods

    <Character>.pregnancyAttempt(father, force) → (boolean) Attempts to get the character, who must have a vagina, pregnant and returns whether it succeeded.
    <Character>.pregnancyFinalize() → (Character) Births the child and returns it.


